#include <exception>
#include "esp_https_server.h"
#include "esp_tls.h"
#include "esp_camera.h"
#include "timer_cam_config.h"
#include "esp_log.h"
#include "network.h"
#include "protocol.h"
#include "light.h"
#include "bme280.h"
#include "error.h"
#include "certificates.h"

static const char* TAG = "httpsd";
httpd_handle_t server = NULL;

#define PART_BOUNDARY "123456789000000000000987654321"
static const char* _STREAM_CONTENT_TYPE = "multipart/x-mixed-replace;boundary=" PART_BOUNDARY;
static const char* _STREAM_BOUNDARY = "\r\n--" PART_BOUNDARY "\r\n";
static const char* _STREAM_PART = "Content-Type: image/jpeg\r\nContent-Length: %u\r\n\r\n";

void https_server_user_callback(esp_https_server_user_cb_arg_t *user_cb)
{
    ESP_LOGI(TAG, "Session Created!");
    const mbedtls_x509_crt *cert;

    const size_t buf_size = 1024;
    char *buf = (char*)calloc(buf_size, sizeof(char));
    if (buf == NULL) {
        ESP_LOGE(TAG, "Out of memory - Callback execution failed!");
        return;
    }

    cert = mbedtls_ssl_get_peer_cert(&user_cb->tls->ssl);
    if (cert != NULL) {
        mbedtls_x509_crt_info((char *) buf, buf_size - 1, "      ", cert);
        ESP_LOGI(TAG, "Peer certificate info:\n%s", buf);
    } else {
        ESP_LOGW(TAG, "Could not obtain the peer certificate!");
    }

    free(buf);
}

esp_err_t jpg_stream_httpd_handler(httpd_req_t *req) {
    camera_fb_t * fb = NULL;
    esp_err_t res = ESP_OK;
    size_t _jpg_buf_len;
    uint8_t * _jpg_buf;
    char * part_buf[64];
    static int64_t last_frame = 0;
    if(!last_frame) {
        last_frame = esp_timer_get_time();
    }

    res = httpd_resp_set_type(req, _STREAM_CONTENT_TYPE);
    CHECK_ERROR(res, TAG, "Error setting content type");

    res = httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
    CHECK_ERROR(res, TAG, "Error set access control allow origin");

    light->turnOn();

    while(true){
        fb = esp_camera_fb_get();
        if (!fb) {
            ESP_LOGE(TAG, "Camera capture failed");
            break ;
        } 

        _jpg_buf_len = fb->len;
        _jpg_buf = fb->buf;

        if(res == ESP_OK){
            size_t hlen = snprintf((char *)part_buf, 64, _STREAM_PART, _jpg_buf_len);

            res = httpd_resp_send_chunk(req, (const char *)part_buf, hlen);
        }
        if(res == ESP_OK){
            res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);
        }
        if(res == ESP_OK){
            res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));
        }

        esp_camera_fb_return(fb);

        if(res != ESP_OK){
            break;
        }

        int64_t fr_end = esp_timer_get_time();
        int64_t frame_time = fr_end - last_frame;
        last_frame = fr_end;
        frame_time /= 1000;
        ESP_LOGI(TAG, "MJPG: %uKB %ums (%.1ffps)", (uint32_t)(_jpg_buf_len/1024), (uint32_t)frame_time, 1000.0 / (uint32_t)frame_time);
    }

    light->turnOff();
    
    last_frame = 0;
    return res;
}

esp_err_t weather_httpd_handler(httpd_req_t* req) {

    float temp(NAN), humidity(NAN), pressure(NAN);

    BME280::TempUnit tempUnit(BME280::TempUnit_Celsius);
    BME280::PresUnit presUnit(BME280::PresUnit_hPa);

    bme->read(pressure, temp, humidity, tempUnit, presUnit);

    char buffer[1024];
    int n = snprintf(buffer, sizeof(buffer), 
        "{\"temp:\" %0.2f, \"humidity\": %0.2f, \"pressure\": %0.2f}",
        temp,
        humidity,
        pressure
    );

    esp_err_t res;

    if (n <= sizeof(buffer)) {

        res = httpd_resp_set_type(req, "application/json");

        CHECK_ERROR(res, TAG, "Error set content type for weather");

        res = httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
        CHECK_ERROR(res, TAG, "Error set access control allow origin");

        res = httpd_resp_send(req, buffer, -1);

        CHECK_ERROR(res, TAG, "Error sending data for weather");
    }
    else {
        // Error Occurred
        res = httpd_resp_send_500(req);
    }

    CHECK_ERROR(res, TAG, "Error sending weather");

    return res;
}
/*
esp_err_t config_httpd_handler(httpd_req_t *req) {

    uint32_t buf_len;
    char *buf = nullptr;

    try {

        char cmd_str[30] = {0};
        char value_str[30] = {0};

        buf_len = httpd_req_get_url_query_len(req) + 1;
        
        if (buf_len < 2) {
            httpd_resp_send_404(req);
            return ESP_FAIL;
        }

        buf = (char *)malloc(buf_len);
        if (!buf) {
            httpd_resp_send_500(req);
            return ESP_FAIL;
        }

        if (httpd_req_get_url_query_str(req, buf, buf_len) != ESP_OK) {
            throw std::exception();
        }

        if(httpd_query_key_value(buf, "cmd", cmd_str, sizeof(cmd_str)) != ESP_OK) {
            throw std::exception();
        }
        
        if(httpd_query_key_value(buf, "value", value_str, sizeof(value_str)) != ESP_OK) {
            throw std::exception();
        }
        
        int cmd = atoi(cmd_str);
        int value = atoi(value_str);
        
        int respond_len = 0;
        uint8_t* respond_buff;
        bool restart = false;
        
        if (cmd == kSetDeviceMode && GetDeviceMode() != value) {
            restart = true;
        }

        respond_buff = DealConfigMsg(cmd, (uint8_t *)&value, 2, &respond_len);
        uint8_t *buff = (uint8_t *)calloc(respond_len + 1, sizeof(uint8_t));
        memcpy(&buff[1], respond_buff, respond_len);
        buff[0] = cmd | 0x80;
        httpd_resp_send(req, (char *)buff, respond_len + 1);
        
        if (restart) {
            vTaskDelay(pdMS_TO_TICKS(100));
            esp_restart();
        }

        free(buf);
        free(buff);
        
        return ESP_OK;
    }
    catch (...) {
        if (buf)
            free(buf);
        httpd_resp_send_404(req);
        return ESP_FAIL;
    }

}
*/
void start_webserver(const char *ssid, const char *pwd) {
    wifi_init_sta(ssid, pwd);
    wifi_wait_connect(portMAX_DELAY);

    //httpd_handle_t stream_server = NULL;
    esp_err_t ret = ESP_OK;

    //httpd_config_t config = HTTPD_DEFAULT_CONFIG();
    httpd_ssl_config_t config = HTTPD_SSL_CONFIG_DEFAULT();
    config.cacert_pem = cacert_pem_start;
    config.cacert_len = cacert_pem_end - cacert_pem_start;
    config.prvtkey_pem = prvtkey_pem_start;
    config.prvtkey_len = prvtkey_pem_end - prvtkey_pem_start;
    config.user_cb = https_server_user_callback;

    // Start the httpd server
    ESP_LOGI(TAG, "Starting https server on port: '%d'", config.httpd.server_port);

    httpd_uri_t jpeg_stream_uri = {
        .uri = "/stream",
        .method = HTTP_GET,
        .handler = jpg_stream_httpd_handler,
        .user_ctx = NULL
    };

    httpd_uri_t weather_uri = {
        .uri = "/weather",
        .method = HTTP_GET,
        .handler = weather_httpd_handler,
        .user_ctx = NULL
    };

    ret = httpd_ssl_start(&server, &config);

    if (ret == ESP_OK) {
        // Set URI handlers
        httpd_register_uri_handler(server, &weather_uri);
        httpd_register_uri_handler(server, &jpeg_stream_uri);
        ESP_LOGI(TAG, "Started https server!");
    }
/*&
    config.httpd.server_port = 444;
    config.httpd.ctrl_port += 1;
    ret = httpd_ssl_start(&stream_server, &config);
    if (ret == ESP_OK) {
        httpd_register_uri_handler(stream_server, &jpeg_stream_uri);
        ESP_LOGI(TAG, "Started stream  server!");
    }
*/
   // ESP_LOGI(TAG, "Starting https server!");
}


