#ifndef BEE_FISH_B_STRING__BIT_STREAM_H
#define BEE_FISH_B_STRING__BIT_STREAM_H

#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <ctype.h>

#include "../power-encoding/power-encoding.h"
#include "data.h"

namespace bee::fish::b_string {

   // A byte aligned stream of bits
   // using a Data member as storage
   // and PowerEncoding as the encoding
   // mechanism

   // This defines the readBit and writeBit
   // functions of PowerEncodong, to append
   // a bit to the current byte.
   class BitStream :
      public PowerEncoding,
      public vector<bool>
   {
   private:
      vector<bool>::const_iterator _it = cend();
      
   public:
   
      BitStream(const BitStream& bitStream) :
         vector<bool>(bitStream)
      {
      }
      
      BitStream(const Data& data)
      {
         for (auto byte : data)
         {
            bitset<8> bits = byte;
            for ( int i = 0;
                  i < 8;
                  ++i )
            {
               bool bit = bits[i];
               push_back(bit);
            }
         }
      }
      
      
      virtual void writeBit(bool bit)
      {
         if (bit)
            cerr << "1";
         else
            cerr << "0";
            
         push_back(bit);
      }
      
      virtual bool readBit()
      {
         bool bit = peekBit();
         
         if (bit)
            cerr << "1";
         else
            cerr << "0";
 
         ++_it;
         
         return bit;
         
      }
      
      virtual bool peekBit()
      {
         if (_it == cend())
            _it = cbegin();
            
         bool bit = *_it;
         
         return bit;
      }

      void reset()
      {
         _it = cend();
      }
      
   };
   
}

#endif


