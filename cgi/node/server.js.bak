// Load up modules
const http = require('http');
const https = require('https');
const auth = require('http-auth');
const md5 = require('md5');
const fs = require('fs');
const url = require('url');
const path = require('path');
const events = require('events');
const process = require('process');

// The host name for the server
const host = "bee.fish";

// Set the secure certificates
// We use lets encrypt
// https://letsencrypt.org/
const KEY_FILE = "/etc/letsencrypt/live/" + host + "/privkey.pem";
const CERT_FILE = "/etc/letsencrypt/live/" + host + "/fullchain.pem";

// maps file extention to MIME types
const file_ext = {
   '.ico': 'image/x-icon',
   '.html': 'text/html',
   '.js': 'text/javascript',
   '.mjs': 'text/javascript',
   '.json': 'application/json',
   '.css': 'text/css',
   '.png': 'image/png',
   '.jpg': 'image/jpeg',
   '.wav': 'audio/wav',
   '.mp3': 'audio/mpeg',
   '.svg': 'image/svg+xml',
   '.pdf': 'application/pdf',
   '.doc': 'application/msword'
};

// Setup the secure https server
setupSecure();

// Setup the redirect server
setupRedirectToSecure();


function setupRedirectToSecure() {
   // create a server object to handle
   // redirects from http:80 to https:443
   console.log("Http redirect to https listening.");

   var server = http.createServer(
      function (request, response) {
         response.statusCode = 301;
         response.setHeader(
            "Location",
            "https://" + host +
               request.url
         );
         // end the response
         response.end("Redirecting..."); 
      }
   );
   
   server.listen(80);
   
   return server;
}

function setupSecure() {

   const digest = auth.digest(
   {
      realm: 'db2'
   },
   (username, callback, message) => { 
      // Custom authentication
      console.log(username);
      // Expecting md5(
      //   username:realm:password
      // ) in callback.
      if (username === "bee") {
         callback(md5("bee:db2:smart"));
      }
   });

   const options = {
      key: fs.readFileSync(KEY_FILE),
      cert: fs.readFileSync(CERT_FILE)
   };

   var server = https.createServer(
      options, 
      digest.check(getPage)
   );
   server.on('connection', (...event) => {
      console.log("connect");
   });

   server.listen(443);

   console.log("HTTPS Server: 443");
   
   return server;
   
   function getPage(request, response) {
   
      console.log(`${request.method} ${request.url}`);

      // parse URL
      const parsedUrl = url.parse(request.url);
      // extract URL path
      var pathname = parsedUrl.pathname;
      // extract fileme name
      var filename = getFilename(pathname);
      
      console.log(filename);
      
      
      // if is a directory search
      // for index file
      
      // Is filename a directory?
      fs.promises.stat(filename)
      .then((st) => {
         if (st.isDirectory()) {
         
            if (!request.url.endsWith("/")) {
               sendRedirect(request.url + "/");
            }
            
            // Set default page index.html
            filename += '/index.html';
         }
         
         // Check that altered
         // filename exists
         fs.promises.access(filename, fs.constants.R_OK)
         .then(() => {
            sendFile(filename);
         })
         .catch((err) => {
            sendNotFound();
         });
         
      })
      .catch ((err) => {
         sendNotFound();
      });
      
      function sendFile(filename) {
         
         // based on the URL path, extract the file extention. e.g. .js, .doc, ...
         const ext = path.parse(filename).ext;
         var stream = fs.createReadStream(filename, {highWaterMark: 1024});

         // Handle non-existent file
         stream.on('error', function(error) {
            response.statusCode = 500;
            response.end(`Error getting the file: ${error}.`);
         });
  
         // File exists, stream it to user
         response.statusCode = 200;
         response.setHeader('Content-type', file_ext[ext] || 'text/plain' );
                  
         if (ext == ".jpg")
            response.setHeader("Cache-control", "public, max-age=86400");
                 
         stream.pipe(response);
        
      }
   
      function sendRedirect(pathname) {
         response.statusCode = 301;
         response.setHeader("Location", request.url + "/");
         return response.end();
      }
      
      function sendNotFound() {
         response.statusCode = 404;
         return 
            response.end(`File ${pathname} not found!`);
      }
     
   }

   function getFilename(pathname) {
      var filename = pathname;
      if (filename.startsWith("/"))
         filename = filename.substr(1);
         
      if (filename.endsWith("/"))
         filename = filename.substr(0, pathname.length - 1);
         
      if (filename == "")
         filename = ".";
         
      if (filename.includes("..")) 
         throw new Error("Security check " + filename);
         
      filename = path.resolve(process.cwd() + "/" + filename);
      
      return filename;
   }
      
      
   
}


